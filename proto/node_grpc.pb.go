// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: proto/node.proto

package blipblop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	JoinNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeService_JoinNodeClient, error)
	FireEvent(ctx context.Context, opts ...grpc.CallOption) (NodeService_FireEventClient, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) JoinNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeService_JoinNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], "/NodeService/JoinNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceJoinNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_JoinNodeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type nodeServiceJoinNodeClient struct {
	grpc.ClientStream
}

func (x *nodeServiceJoinNodeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) FireEvent(ctx context.Context, opts ...grpc.CallOption) (NodeService_FireEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[1], "/NodeService/FireEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceFireEventClient{stream}
	return x, nil
}

type NodeService_FireEventClient interface {
	Send(*Event) error
	CloseAndRecv() (*EventAck, error)
	grpc.ClientStream
}

type nodeServiceFireEventClient struct {
	grpc.ClientStream
}

func (x *nodeServiceFireEventClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeServiceFireEventClient) CloseAndRecv() (*EventAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EventAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	JoinNode(*Node, NodeService_JoinNodeServer) error
	FireEvent(NodeService_FireEventServer) error
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) JoinNode(*Node, NodeService_JoinNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinNode not implemented")
}
func (UnimplementedNodeServiceServer) FireEvent(NodeService_FireEventServer) error {
	return status.Errorf(codes.Unimplemented, "method FireEvent not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_JoinNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).JoinNode(m, &nodeServiceJoinNodeServer{stream})
}

type NodeService_JoinNodeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type nodeServiceJoinNodeServer struct {
	grpc.ServerStream
}

func (x *nodeServiceJoinNodeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_FireEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServiceServer).FireEvent(&nodeServiceFireEventServer{stream})
}

type NodeService_FireEventServer interface {
	SendAndClose(*EventAck) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type nodeServiceFireEventServer struct {
	grpc.ServerStream
}

func (x *nodeServiceFireEventServer) SendAndClose(m *EventAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeServiceFireEventServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinNode",
			Handler:       _NodeService_JoinNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FireEvent",
			Handler:       _NodeService_FireEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/node.proto",
}
