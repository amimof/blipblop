// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/services/events/v1/events.proto

package events

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Selector

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ObjectId

	// no validation rules for ClientId

	// no validation rules for Type

	// no validation rules for Operation

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on GetEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventRequestMultiError, or nil if none found.
func (m *GetEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetEventRequestMultiError(errors)
	}

	return nil
}

// GetEventRequestMultiError is an error wrapping multiple validation errors
// returned by GetEventRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventRequestMultiError) AllErrors() []error { return m }

// GetEventRequestValidationError is the validation error returned by
// GetEventRequest.Validate if the designated constraints aren't met.
type GetEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventRequestValidationError) ErrorName() string { return "GetEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventRequestValidationError{}

// Validate checks the field values on GetEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventResponseMultiError, or nil if none found.
func (m *GetEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEventResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEventResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEventResponseMultiError(errors)
	}

	return nil
}

// GetEventResponseMultiError is an error wrapping multiple validation errors
// returned by GetEventResponse.ValidateAll() if the designated constraints
// aren't met.
type GetEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventResponseMultiError) AllErrors() []error { return m }

// GetEventResponseValidationError is the validation error returned by
// GetEventResponse.Validate if the designated constraints aren't met.
type GetEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventResponseValidationError) ErrorName() string { return "GetEventResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventResponseValidationError{}

// Validate checks the field values on ListEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventRequestMultiError, or nil if none found.
func (m *ListEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Selector

	if len(errors) > 0 {
		return ListEventRequestMultiError(errors)
	}

	return nil
}

// ListEventRequestMultiError is an error wrapping multiple validation errors
// returned by ListEventRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventRequestMultiError) AllErrors() []error { return m }

// ListEventRequestValidationError is the validation error returned by
// ListEventRequest.Validate if the designated constraints aren't met.
type ListEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventRequestValidationError) ErrorName() string { return "ListEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventRequestValidationError{}

// Validate checks the field values on ListEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventResponseMultiError, or nil if none found.
func (m *ListEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEventResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEventResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEventResponseMultiError(errors)
	}

	return nil
}

// ListEventResponseMultiError is an error wrapping multiple validation errors
// returned by ListEventResponse.ValidateAll() if the designated constraints
// aren't met.
type ListEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventResponseMultiError) AllErrors() []error { return m }

// ListEventResponseValidationError is the validation error returned by
// ListEventResponse.Validate if the designated constraints aren't met.
type ListEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventResponseValidationError) ErrorName() string {
	return "ListEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventResponseValidationError{}

// Validate checks the field values on DeleteEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEventRequestMultiError, or nil if none found.
func (m *DeleteEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteEventRequestMultiError(errors)
	}

	return nil
}

// DeleteEventRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEventRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventRequestMultiError) AllErrors() []error { return m }

// DeleteEventRequestValidationError is the validation error returned by
// DeleteEventRequest.Validate if the designated constraints aren't met.
type DeleteEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventRequestValidationError) ErrorName() string {
	return "DeleteEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventRequestValidationError{}

// Validate checks the field values on DeleteEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEventResponseMultiError, or nil if none found.
func (m *DeleteEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteEventResponseMultiError(errors)
	}

	return nil
}

// DeleteEventResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteEventResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventResponseMultiError) AllErrors() []error { return m }

// DeleteEventResponseValidationError is the validation error returned by
// DeleteEventResponse.Validate if the designated constraints aren't met.
type DeleteEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventResponseValidationError) ErrorName() string {
	return "DeleteEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventResponseValidationError{}

// Validate checks the field values on PublishRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishRequestMultiError,
// or nil if none found.
func (m *PublishRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishRequestMultiError(errors)
	}

	return nil
}

// PublishRequestMultiError is an error wrapping multiple validation errors
// returned by PublishRequest.ValidateAll() if the designated constraints
// aren't met.
type PublishRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishRequestMultiError) AllErrors() []error { return m }

// PublishRequestValidationError is the validation error returned by
// PublishRequest.Validate if the designated constraints aren't met.
type PublishRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishRequestValidationError) ErrorName() string { return "PublishRequestValidationError" }

// Error satisfies the builtin error interface
func (e PublishRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishRequestValidationError{}

// Validate checks the field values on PublishResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublishResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishResponseMultiError, or nil if none found.
func (m *PublishResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishResponseMultiError(errors)
	}

	return nil
}

// PublishResponseMultiError is an error wrapping multiple validation errors
// returned by PublishResponse.ValidateAll() if the designated constraints
// aren't met.
type PublishResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishResponseMultiError) AllErrors() []error { return m }

// PublishResponseValidationError is the validation error returned by
// PublishResponse.Validate if the designated constraints aren't met.
type PublishResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishResponseValidationError) ErrorName() string { return "PublishResponseValidationError" }

// Error satisfies the builtin error interface
func (e PublishResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishResponseValidationError{}
