// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/services/containersets/v1/containersets.proto

package containersets

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContainerSet with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerSet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerSetMultiError, or
// nil if none found.
func (m *ContainerSet) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMeta() == nil {
		err := ContainerSetValidationError{
			field:  "Meta",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerSetValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerSetValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerSetValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTemplate() == nil {
		err := ContainerSetValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerSetValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerSetValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerSetValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContainerSetMultiError(errors)
	}

	return nil
}

// ContainerSetMultiError is an error wrapping multiple validation errors
// returned by ContainerSet.ValidateAll() if the designated constraints aren't met.
type ContainerSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerSetMultiError) AllErrors() []error { return m }

// ContainerSetValidationError is the validation error returned by
// ContainerSet.Validate if the designated constraints aren't met.
type ContainerSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerSetValidationError) ErrorName() string { return "ContainerSetValidationError" }

// Error satisfies the builtin error interface
func (e ContainerSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerSetValidationError{}

// Validate checks the field values on GetContainerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContainerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContainerSetRequestMultiError, or nil if none found.
func (m *GetContainerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetContainerSetRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetContainerSetRequestMultiError(errors)
	}

	return nil
}

// GetContainerSetRequestMultiError is an error wrapping multiple validation
// errors returned by GetContainerSetRequest.ValidateAll() if the designated
// constraints aren't met.
type GetContainerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerSetRequestMultiError) AllErrors() []error { return m }

// GetContainerSetRequestValidationError is the validation error returned by
// GetContainerSetRequest.Validate if the designated constraints aren't met.
type GetContainerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerSetRequestValidationError) ErrorName() string {
	return "GetContainerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerSetRequestValidationError{}

// Validate checks the field values on GetContainerSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContainerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContainerSetResponseMultiError, or nil if none found.
func (m *GetContainerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContainerSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetContainerSetResponseValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetContainerSetResponseValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetContainerSetResponseValidationError{
				field:  "ContainerSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetContainerSetResponseMultiError(errors)
	}

	return nil
}

// GetContainerSetResponseMultiError is an error wrapping multiple validation
// errors returned by GetContainerSetResponse.ValidateAll() if the designated
// constraints aren't met.
type GetContainerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerSetResponseMultiError) AllErrors() []error { return m }

// GetContainerSetResponseValidationError is the validation error returned by
// GetContainerSetResponse.Validate if the designated constraints aren't met.
type GetContainerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerSetResponseValidationError) ErrorName() string {
	return "GetContainerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerSetResponseValidationError{}

// Validate checks the field values on CreateContainerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContainerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContainerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContainerSetRequestMultiError, or nil if none found.
func (m *CreateContainerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetContainerSet() == nil {
		err := CreateContainerSetRequestValidationError{
			field:  "ContainerSet",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContainerSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContainerSetRequestValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContainerSetRequestValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerSetRequestValidationError{
				field:  "ContainerSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateContainerSetRequestMultiError(errors)
	}

	return nil
}

// CreateContainerSetRequestMultiError is an error wrapping multiple validation
// errors returned by CreateContainerSetRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateContainerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerSetRequestMultiError) AllErrors() []error { return m }

// CreateContainerSetRequestValidationError is the validation error returned by
// CreateContainerSetRequest.Validate if the designated constraints aren't met.
type CreateContainerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerSetRequestValidationError) ErrorName() string {
	return "CreateContainerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerSetRequestValidationError{}

// Validate checks the field values on CreateContainerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContainerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContainerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContainerSetResponseMultiError, or nil if none found.
func (m *CreateContainerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContainerSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContainerSetResponseValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContainerSetResponseValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerSetResponseValidationError{
				field:  "ContainerSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateContainerSetResponseMultiError(errors)
	}

	return nil
}

// CreateContainerSetResponseMultiError is an error wrapping multiple
// validation errors returned by CreateContainerSetResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateContainerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerSetResponseMultiError) AllErrors() []error { return m }

// CreateContainerSetResponseValidationError is the validation error returned
// by CreateContainerSetResponse.Validate if the designated constraints aren't met.
type CreateContainerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerSetResponseValidationError) ErrorName() string {
	return "CreateContainerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerSetResponseValidationError{}

// Validate checks the field values on UpdateContainerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContainerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContainerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContainerSetRequestMultiError, or nil if none found.
func (m *UpdateContainerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContainerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateContainerSetRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContainerSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContainerSetRequestValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContainerSetRequestValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContainerSetRequestValidationError{
				field:  "ContainerSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContainerSetRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContainerSetRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContainerSetRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateContainerSetRequestMultiError(errors)
	}

	return nil
}

// UpdateContainerSetRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateContainerSetRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateContainerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContainerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContainerSetRequestMultiError) AllErrors() []error { return m }

// UpdateContainerSetRequestValidationError is the validation error returned by
// UpdateContainerSetRequest.Validate if the designated constraints aren't met.
type UpdateContainerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContainerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContainerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContainerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContainerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContainerSetRequestValidationError) ErrorName() string {
	return "UpdateContainerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContainerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContainerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContainerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContainerSetRequestValidationError{}

// Validate checks the field values on UpdateContainerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContainerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContainerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContainerSetResponseMultiError, or nil if none found.
func (m *UpdateContainerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContainerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContainerSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateContainerSetResponseValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateContainerSetResponseValidationError{
					field:  "ContainerSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContainerSetResponseValidationError{
				field:  "ContainerSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateContainerSetResponseMultiError(errors)
	}

	return nil
}

// UpdateContainerSetResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateContainerSetResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateContainerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContainerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContainerSetResponseMultiError) AllErrors() []error { return m }

// UpdateContainerSetResponseValidationError is the validation error returned
// by UpdateContainerSetResponse.Validate if the designated constraints aren't met.
type UpdateContainerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContainerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContainerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContainerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContainerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContainerSetResponseValidationError) ErrorName() string {
	return "UpdateContainerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContainerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContainerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContainerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContainerSetResponseValidationError{}

// Validate checks the field values on DeleteContainerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContainerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContainerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContainerSetRequestMultiError, or nil if none found.
func (m *DeleteContainerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContainerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteContainerSetRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteContainerSetRequestMultiError(errors)
	}

	return nil
}

// DeleteContainerSetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteContainerSetRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteContainerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContainerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContainerSetRequestMultiError) AllErrors() []error { return m }

// DeleteContainerSetRequestValidationError is the validation error returned by
// DeleteContainerSetRequest.Validate if the designated constraints aren't met.
type DeleteContainerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContainerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContainerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContainerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContainerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContainerSetRequestValidationError) ErrorName() string {
	return "DeleteContainerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContainerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContainerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContainerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContainerSetRequestValidationError{}

// Validate checks the field values on DeleteContainerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContainerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContainerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContainerSetResponseMultiError, or nil if none found.
func (m *DeleteContainerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContainerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteContainerSetResponseMultiError(errors)
	}

	return nil
}

// DeleteContainerSetResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteContainerSetResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteContainerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContainerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContainerSetResponseMultiError) AllErrors() []error { return m }

// DeleteContainerSetResponseValidationError is the validation error returned
// by DeleteContainerSetResponse.Validate if the designated constraints aren't met.
type DeleteContainerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContainerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContainerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContainerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContainerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContainerSetResponseValidationError) ErrorName() string {
	return "DeleteContainerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContainerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContainerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContainerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContainerSetResponseValidationError{}

// Validate checks the field values on ListContainerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerSetRequestMultiError, or nil if none found.
func (m *ListContainerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Selector

	if len(errors) > 0 {
		return ListContainerSetRequestMultiError(errors)
	}

	return nil
}

// ListContainerSetRequestMultiError is an error wrapping multiple validation
// errors returned by ListContainerSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ListContainerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerSetRequestMultiError) AllErrors() []error { return m }

// ListContainerSetRequestValidationError is the validation error returned by
// ListContainerSetRequest.Validate if the designated constraints aren't met.
type ListContainerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerSetRequestValidationError) ErrorName() string {
	return "ListContainerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerSetRequestValidationError{}

// Validate checks the field values on ListContainerSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerSetResponseMultiError, or nil if none found.
func (m *ListContainerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContainerSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContainerSetResponseValidationError{
						field:  fmt.Sprintf("ContainerSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContainerSetResponseValidationError{
						field:  fmt.Sprintf("ContainerSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContainerSetResponseValidationError{
					field:  fmt.Sprintf("ContainerSets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContainerSetResponseMultiError(errors)
	}

	return nil
}

// ListContainerSetResponseMultiError is an error wrapping multiple validation
// errors returned by ListContainerSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ListContainerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerSetResponseMultiError) AllErrors() []error { return m }

// ListContainerSetResponseValidationError is the validation error returned by
// ListContainerSetResponse.Validate if the designated constraints aren't met.
type ListContainerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerSetResponseValidationError) ErrorName() string {
	return "ListContainerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerSetResponseValidationError{}
