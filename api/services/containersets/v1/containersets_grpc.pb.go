// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/services/containersets/v1/containersets.proto

package containersets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerSetServiceClient is the client API for ContainerSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerSetServiceClient interface {
	Get(ctx context.Context, in *GetContainerSetRequest, opts ...grpc.CallOption) (*GetContainerSetResponse, error)
	List(ctx context.Context, in *ListContainerSetRequest, opts ...grpc.CallOption) (*ListContainerSetResponse, error)
	Create(ctx context.Context, in *CreateContainerSetRequest, opts ...grpc.CallOption) (*CreateContainerSetResponse, error)
	Update(ctx context.Context, in *UpdateContainerSetRequest, opts ...grpc.CallOption) (*UpdateContainerSetResponse, error)
	Delete(ctx context.Context, in *DeleteContainerSetRequest, opts ...grpc.CallOption) (*DeleteContainerSetResponse, error)
}

type containerSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerSetServiceClient(cc grpc.ClientConnInterface) ContainerSetServiceClient {
	return &containerSetServiceClient{cc}
}

func (c *containerSetServiceClient) Get(ctx context.Context, in *GetContainerSetRequest, opts ...grpc.CallOption) (*GetContainerSetResponse, error) {
	out := new(GetContainerSetResponse)
	err := c.cc.Invoke(ctx, "/blipblop.services.containersets.v1.ContainerSetService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerSetServiceClient) List(ctx context.Context, in *ListContainerSetRequest, opts ...grpc.CallOption) (*ListContainerSetResponse, error) {
	out := new(ListContainerSetResponse)
	err := c.cc.Invoke(ctx, "/blipblop.services.containersets.v1.ContainerSetService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerSetServiceClient) Create(ctx context.Context, in *CreateContainerSetRequest, opts ...grpc.CallOption) (*CreateContainerSetResponse, error) {
	out := new(CreateContainerSetResponse)
	err := c.cc.Invoke(ctx, "/blipblop.services.containersets.v1.ContainerSetService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerSetServiceClient) Update(ctx context.Context, in *UpdateContainerSetRequest, opts ...grpc.CallOption) (*UpdateContainerSetResponse, error) {
	out := new(UpdateContainerSetResponse)
	err := c.cc.Invoke(ctx, "/blipblop.services.containersets.v1.ContainerSetService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerSetServiceClient) Delete(ctx context.Context, in *DeleteContainerSetRequest, opts ...grpc.CallOption) (*DeleteContainerSetResponse, error) {
	out := new(DeleteContainerSetResponse)
	err := c.cc.Invoke(ctx, "/blipblop.services.containersets.v1.ContainerSetService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerSetServiceServer is the server API for ContainerSetService service.
// All implementations must embed UnimplementedContainerSetServiceServer
// for forward compatibility
type ContainerSetServiceServer interface {
	Get(context.Context, *GetContainerSetRequest) (*GetContainerSetResponse, error)
	List(context.Context, *ListContainerSetRequest) (*ListContainerSetResponse, error)
	Create(context.Context, *CreateContainerSetRequest) (*CreateContainerSetResponse, error)
	Update(context.Context, *UpdateContainerSetRequest) (*UpdateContainerSetResponse, error)
	Delete(context.Context, *DeleteContainerSetRequest) (*DeleteContainerSetResponse, error)
	mustEmbedUnimplementedContainerSetServiceServer()
}

// UnimplementedContainerSetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContainerSetServiceServer struct {
}

func (UnimplementedContainerSetServiceServer) Get(context.Context, *GetContainerSetRequest) (*GetContainerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContainerSetServiceServer) List(context.Context, *ListContainerSetRequest) (*ListContainerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedContainerSetServiceServer) Create(context.Context, *CreateContainerSetRequest) (*CreateContainerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContainerSetServiceServer) Update(context.Context, *UpdateContainerSetRequest) (*UpdateContainerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContainerSetServiceServer) Delete(context.Context, *DeleteContainerSetRequest) (*DeleteContainerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContainerSetServiceServer) mustEmbedUnimplementedContainerSetServiceServer() {}

// UnsafeContainerSetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerSetServiceServer will
// result in compilation errors.
type UnsafeContainerSetServiceServer interface {
	mustEmbedUnimplementedContainerSetServiceServer()
}

func RegisterContainerSetServiceServer(s grpc.ServiceRegistrar, srv ContainerSetServiceServer) {
	s.RegisterService(&ContainerSetService_ServiceDesc, srv)
}

func _ContainerSetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blipblop.services.containersets.v1.ContainerSetService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSetServiceServer).Get(ctx, req.(*GetContainerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerSetService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSetServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blipblop.services.containersets.v1.ContainerSetService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSetServiceServer).List(ctx, req.(*ListContainerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerSetService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSetServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blipblop.services.containersets.v1.ContainerSetService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSetServiceServer).Create(ctx, req.(*CreateContainerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerSetService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSetServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blipblop.services.containersets.v1.ContainerSetService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSetServiceServer).Update(ctx, req.(*UpdateContainerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerSetService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerSetServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blipblop.services.containersets.v1.ContainerSetService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerSetServiceServer).Delete(ctx, req.(*DeleteContainerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerSetService_ServiceDesc is the grpc.ServiceDesc for ContainerSetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerSetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blipblop.services.containersets.v1.ContainerSetService",
	HandlerType: (*ContainerSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ContainerSetService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ContainerSetService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ContainerSetService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ContainerSetService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContainerSetService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/containersets/v1/containersets.proto",
}
