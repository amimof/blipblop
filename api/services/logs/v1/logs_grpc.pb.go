// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/services/logs/v1/logs.proto

package logs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	LogStream(ctx context.Context, opts ...grpc.CallOption) (LogService_LogStreamClient, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LogService_SubscribeClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) LogStream(ctx context.Context, opts ...grpc.CallOption) (LogService_LogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], "/blipblop.services.logs.v1.LogService/LogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceLogStreamClient{stream}
	return x, nil
}

type LogService_LogStreamClient interface {
	Send(*LogStreamRequest) error
	Recv() (*LogStreamResponse, error)
	grpc.ClientStream
}

type logServiceLogStreamClient struct {
	grpc.ClientStream
}

func (x *logServiceLogStreamClient) Send(m *LogStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceLogStreamClient) Recv() (*LogStreamResponse, error) {
	m := new(LogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LogService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[1], "/blipblop.services.logs.v1.LogService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type logServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *logServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	LogStream(LogService_LogStreamServer) error
	Subscribe(*SubscribeRequest, LogService_SubscribeServer) error
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) LogStream(LogService_LogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}
func (UnimplementedLogServiceServer) Subscribe(*SubscribeRequest, LogService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).LogStream(&logServiceLogStreamServer{stream})
}

type LogService_LogStreamServer interface {
	Send(*LogStreamResponse) error
	Recv() (*LogStreamRequest, error)
	grpc.ServerStream
}

type logServiceLogStreamServer struct {
	grpc.ServerStream
}

func (x *logServiceLogStreamServer) Send(m *LogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceLogStreamServer) Recv() (*LogStreamRequest, error) {
	m := new(LogStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).Subscribe(m, &logServiceSubscribeServer{stream})
}

type LogService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type logServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *logServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blipblop.services.logs.v1.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LogStream",
			Handler:       _LogService_LogStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _LogService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/services/logs/v1/logs.proto",
}
