syntax = "proto3";

package blipblop.services.nodes.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "api/types/v1/meta.proto";
import "api/services/events/v1/events.proto";

option go_package = "github.com/amimof/blipblop/api/services/nodes/v1;nodes";

service NodeService {
  rpc List(ListNodeRequest) returns (ListNodeResponse) {
    option (google.api.http) = {
      get: "/api/v1/nodes"
    };
  }
  rpc Get(GetNodeRequest) returns (GetNodeResponse) {
    option (google.api.http) = {
      get: "/api/v1/nodes/{id}"
    };
  }
  rpc Create(CreateNodeRequest) returns (CreateNodeResponse) {
    option (google.api.http) = {
      post: "/api/v1/nodes"
      body: "node"
    };
  }
  rpc Update(UpdateNodeRequest) returns (UpdateNodeResponse) {
    option (google.api.http) = {
      put: "/api/v1/nodes/{node.meta.name}"
      body: "node"
      additional_bindings {
        patch: "/api/v1/nodes/{node.meta.name}"
        body: "node"
      }
    };
  }
  rpc Delete(DeleteNodeRequest) returns (DeleteNodeResponse) {
    option (google.api.http) = {
      delete: "/api/v1/nodes/{id}"
    };
  }
  rpc Join(JoinRequest) returns (JoinResponse) {}
  rpc Forget(ForgetRequest) returns (ForgetResponse) {}

  rpc Connect(stream blipblop.services.events.v1.Event) returns (stream blipblop.services.events.v1.Event){}
}

message Node {
  blipblop.types.v1.Meta meta = 1 [(validate.rules).message.required = true];
  Status status = 2;
}

message Status {
  string state = 5;
}

message GetNodeRequest {
  string id = 1 [(validate.rules).string.min_len = 1];
}

message GetNodeResponse {
  Node node = 1;
}

message CreateNodeRequest {
  Node node = 1 [(validate.rules).message.required = true];
}

message CreateNodeResponse {
  Node node = 1;
}

message DeleteNodeRequest {
  string id = 1 [(validate.rules).string.min_len = 1];
}

message DeleteNodeResponse {
  string id = 1;
}

message UpdateNodeRequest {
  string id = 1 [(validate.rules).string.min_len = 1];
  Node node = 2 [(validate.rules).message.required = true];
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateNodeResponse {
  Node node = 1;
}

message ListNodeRequest {
  map<string, string> selector = 1;
}

message ListNodeResponse {
  repeated Node nodes = 1;
}

message JoinRequest {
  Node node = 1 [(validate.rules).message.required = true];
}

message JoinResponse {
  string id = 1;
}

message ForgetRequest {
  string id = 1 [(validate.rules).string.min_len = 1];
}

message ForgetResponse {
  string id = 1;
}
