// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/services/containers/v1 (interfaces: ContainerServiceClient)
//
// Generated by this command:
//
//	mockgen -package v1 ./api/services/containers/v1 ContainerServiceClient
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	v1 "github.com/amimof/blipblop/api/services/containers/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockContainerServiceClient is a mock of ContainerServiceClient interface.
type MockContainerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockContainerServiceClientMockRecorder
	isgomock struct{}
}

// MockContainerServiceClientMockRecorder is the mock recorder for MockContainerServiceClient.
type MockContainerServiceClientMockRecorder struct {
	mock *MockContainerServiceClient
}

// NewMockContainerServiceClient creates a new mock instance.
func NewMockContainerServiceClient(ctrl *gomock.Controller) *MockContainerServiceClient {
	mock := &MockContainerServiceClient{ctrl: ctrl}
	mock.recorder = &MockContainerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerServiceClient) EXPECT() *MockContainerServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContainerServiceClient) Create(ctx context.Context, in *v1.CreateContainerRequest, opts ...grpc.CallOption) (*v1.CreateContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1.CreateContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContainerServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContainerServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockContainerServiceClient) Delete(ctx context.Context, in *v1.DeleteContainerRequest, opts ...grpc.CallOption) (*v1.DeleteContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*v1.DeleteContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockContainerServiceClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContainerServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockContainerServiceClient) Get(ctx context.Context, in *v1.GetContainerRequest, opts ...grpc.CallOption) (*v1.GetContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.GetContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContainerServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContainerServiceClient)(nil).Get), varargs...)
}

// Kill mocks base method.
func (m *MockContainerServiceClient) Kill(ctx context.Context, in *v1.KillContainerRequest, opts ...grpc.CallOption) (*v1.KillContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Kill", varargs...)
	ret0, _ := ret[0].(*v1.KillContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kill indicates an expected call of Kill.
func (mr *MockContainerServiceClientMockRecorder) Kill(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockContainerServiceClient)(nil).Kill), varargs...)
}

// List mocks base method.
func (m *MockContainerServiceClient) List(ctx context.Context, in *v1.ListContainerRequest, opts ...grpc.CallOption) (*v1.ListContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1.ListContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockContainerServiceClientMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContainerServiceClient)(nil).List), varargs...)
}

// Start mocks base method.
func (m *MockContainerServiceClient) Start(ctx context.Context, in *v1.StartContainerRequest, opts ...grpc.CallOption) (*v1.StartContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(*v1.StartContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockContainerServiceClientMockRecorder) Start(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockContainerServiceClient)(nil).Start), varargs...)
}

// Update mocks base method.
func (m *MockContainerServiceClient) Update(ctx context.Context, in *v1.UpdateContainerRequest, opts ...grpc.CallOption) (*v1.UpdateContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*v1.UpdateContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockContainerServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContainerServiceClient)(nil).Update), varargs...)
}
